#include<iostream>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<SDL2/SDL.h>

typedef float सङ्ख्या;

enum वर्णः {अत्,आत्,इत्,ईत्,उत्,ऊत्,ऋत्,ॠत्,ऌत्,ॡत्,एत्,ऐत्,ओत्,औत्,
					कः,खः,गः,घः,ङः,चः,छः,जः,झः,ञः,टः,ठः,डः,ढः,णः,तः,थः,दः,धः,नः,पः,फः,बः,भः,मः,यः,रः,लः,वः,शः,षः,सः,हः,
					विसर्गः,अनुस्वारः,मौनम्};

class वाचकम्
{
	class वदनम्
	{
	public:
		int भागाः,नासिक्यभागाः,नासिकास्थानम्;
		सङ्ख्या शब्दवेगः=343.0,मुखदैर्घ्यम्,*मुखविस्तारः,*नासिकाविस्तारः,*बाह्यम्,*आन्तरिकम्,*नासिक्यबाह्यम्,*नासिक्यान्तरिकम्;
		वदनम्(int भागेभ्यः,int नासिकास्थानाय,सङ्ख्या मुखदैर्घ्याय)
		{
			भागाः=भागेभ्यः;
			नासिकास्थानम्=नासिकास्थानाय;
			नासिक्यभागाः=भागाः-नासिकास्थानम्;
			मुखदैर्घ्यम्=मुखदैर्घ्याय;
			मुखविस्तारः=new सङ्ख्या[भागाः];
			नासिकाविस्तारः=new सङ्ख्या[नासिक्यभागाः];
			बाह्यम्=new सङ्ख्या[भागाः]();
			आन्तरिकम्=new सङ्ख्या[भागाः]();
			नासिक्यबाह्यम्=new सङ्ख्या[नासिक्यभागाः]();
			नासिक्यान्तरिकम्=new सङ्ख्या[नासिक्यभागाः]();
		}
		
		~वदनम्()
		{
			delete[] मुखविस्तारः;delete[] नासिकाविस्तारः;delete[] बाह्यम्;delete[] आन्तरिकम्;delete[] नासिक्यबाह्यम्;delete[] नासिक्यान्तरिकम्;
		}
		सङ्ख्या निर्गतिः()
		{
			return बाह्यम्[भागाः-1]+आन्तरिकम्[भागाः-1]+नासिक्यबाह्यम्[नासिक्यभागाः-1]+नासिक्यान्तरिकम्[नासिक्यभागाः-1];
		}
		void योजनम्(int भागः,सङ्ख्या मात्रा)
		{
			बाह्यम्[भागः]+=मात्रा/2.0;
			आन्तरिकम्[भागः]+=मात्रा/2.0;
		}
		सङ्ख्या प्रवाहः(सङ्ख्या कण्ठ्यम्)
		{
			सङ्ख्या नवबाह्यम्[भागाः+1],नवान्तरिकम्[भागाः+1],नवनासिक्यबाह्यम्[नासिक्यभागाः+1],नवनासिक्यान्तरिकम्[नासिक्यभागाः+1];
			for(int भागः=1;भागः<भागाः;भागः++)
			{
				सङ्ख्या प्रत्यागतिः=(मुखविस्तारः[भागः-1]-मुखविस्तारः[भागः])/(मुखविस्तारः[भागः-1]+मुखविस्तारः[भागः])*(बाह्यम्[भागः-1]+आन्तरिकम्[भागः]);
				नवबाह्यम्[भागः]=बाह्यम्[भागः-1]-प्रत्यागतिः;
				नवान्तरिकम्[भागः]=आन्तरिकम्[भागः]+प्रत्यागतिः;
			}
			for(int भागः=1;भागः<नासिक्यभागाः;भागः++)
			{
				सङ्ख्या प्रत्यागतिः=(नासिकाविस्तारः[भागः-1]-नासिकाविस्तारः[भागः])/(नासिकाविस्तारः[भागः-1]+नासिकाविस्तारः[भागः])*(नासिक्यबाह्यम्[भागः-1]+नासिक्यान्तरिकम्[भागः]);
				नवनासिक्यबाह्यम्[भागः]=नासिक्यबाह्यम्[भागः-1]-प्रत्यागतिः;
				नवनासिक्यान्तरिकम्[भागः]=नासिक्यान्तरिकम्[भागः]+प्रत्यागतिः;
			}
			
			नवबाह्यम्[0]=आन्तरिकम्[0]*0.75+कण्ठ्यम्;
			नवान्तरिकम्[भागाः]=बाह्यम्[भागाः-1]*(-0.85);
			नवनासिक्यान्तरिकम्[नासिक्यभागाः]=नासिक्यबाह्यम्[नासिक्यभागाः-1]*(-0.85);
			
			{
				सङ्ख्या योगः=मुखविस्तारः[नासिकास्थानम्]+मुखविस्तारः[नासिकास्थानम्-1]+नासिकाविस्तारः[0];
				{
					सङ्ख्या प्रत्यागतिः=(2.0*मुखविस्तारः[नासिकास्थानम्-1]-योगः)/योगः;
					नवान्तरिकम्[नासिकास्थानम्]=प्रत्यागतिः*बाह्यम्[नासिकास्थानम्-1]+(1.0+प्रत्यागतिः)*(नासिक्यान्तरिकम्[0]+आन्तरिकम्[नासिकास्थानम्]);
				}
				{
					सङ्ख्या प्रत्यागतिः=(2.0*मुखविस्तारः[नासिकास्थानम्]-योगः)/योगः;
					नवबाह्यम्[नासिकास्थानम्]=प्रत्यागतिः*आन्तरिकम्[नासिकास्थानम्]+(1.0+प्रत्यागतिः)*(नासिक्यान्तरिकम्[0]+बाह्यम्[नासिकास्थानम्-1]);
				}
				{
					सङ्ख्या प्रत्यागतिः=(2.0*नासिकाविस्तारः[0]-योगः)/योगः;
					नवनासिक्यबाह्यम्[0]=प्रत्यागतिः*नासिक्यान्तरिकम्[0]+(1.0+प्रत्यागतिः)*(बाह्यम्[नासिकास्थानम्-1]+आन्तरिकम्[नासिकास्थानम्]);
				}
			}
			
			memcpy(बाह्यम्,नवबाह्यम्,भागाः*sizeof(सङ्ख्या));
			memcpy(आन्तरिकम्,नवान्तरिकम्+1,भागाः*sizeof(सङ्ख्या));
			memcpy(नासिक्यबाह्यम्,नवनासिक्यबाह्यम्,नासिक्यभागाः*sizeof(सङ्ख्या));
			memcpy(नासिक्यान्तरिकम्,नवनासिक्यान्तरिकम्+1,नासिक्यभागाः*sizeof(सङ्ख्या));
			
			return मुखदैर्घ्यम्/(सङ्ख्या)भागाः/शब्दवेगः;
		}
	};
public:
	वदनम् यन्त्रम्;
	सङ्ख्या कालः=0;
	int ग्रहणानि=0;
	int नैमिषिकानि=16000;
	class वर्णसङ्ग्रहः
	{
		static const int अवकाशः=20;
		वर्णः सङ्ग्रहः[अवकाशः];
		size_t स्थानम्=0,आदिः=0,अन्तः=0;
		bool लोपः=false;
	public:
		struct वर्णक्रमः
		{
			वर्णः (*क्रमणम्)(void*);
			void* अन्वयः;
		};
	private:
		 वर्णक्रमः वर्णाः;
	public:
		वर्णसङ्ग्रहः(वर्णक्रमः यद्वर्णाः)
		{
			वर्णाः=यद्वर्णाः;
		}
		
		template <typename अङ्कनम्>
		void वृद्धिः(अङ्कनम् & अङ्कः){अङ्कः++;if(अङ्कः==अवकाशः)अङ्कः=0;}
		template <typename अङ्कनम्>
		अङ्कनम् अन्तरम्(const अङ्कनम् आदिः,const अङ्कनम् अन्तः)
		{
			if(अन्तः>आदिः)return अन्तः-आदिः;
			else return अन्तः-आदिः+अवकाशः;
		}
		
		वर्णः पठनम्(int अतिक्रमः=0)
		{
			if(अतिक्रमः==0)return सङ्ग्रहः[स्थानम्];
			else if(अतिक्रमः<0)
			{
				if(-अतिक्रमः<=अन्तरम्(आदिः,स्थानम्))
				{
					int लक्ष्यः=स्थानम्+अतिक्रमः;
					if(लक्ष्यः<0)लक्ष्यः+=अवकाशः;
					return सङ्ग्रहः[लक्ष्यः];
				}
				else if(!लोपः)return मौनम्;
				else throw(अतिक्रमः);
			}
			else
			{
				if(अतिक्रमः<=अन्तरम्(स्थानम्,अन्तः))
				{
					int लक्ष्यः=स्थानम्+अतिक्रमः;
					if(लक्ष्यः>अवकाशः)लक्ष्यः-=अवकाशः;
					return सङ्ग्रहः[लक्ष्यः];
				}
				else if(अतिक्रमः<अवकाशः)
				{
					int लक्ष्यः=स्थानम्+अतिक्रमः;
					if(लक्ष्यः>अवकाशः)लक्ष्यः-=अवकाशः;
					while(अन्तः!=लक्ष्यः)
					{
						वृद्धिः(अन्तः);
						if(अन्तः==आदिः){वृद्धिः(आदिः);लोपः=true;}
						सङ्ग्रहः[अन्तः]=वर्णाः.क्रमणम्(वर्णाः.अन्वयः);
					}
					return सङ्ग्रहः[लक्ष्यः];
				}
				else throw(अतिक्रमः);
			}
		}
		void क्रमणम्()
		{
			if(स्थानम्!=अन्तः)वृद्धिः(स्थानम्);
			else
			{
				वृद्धिः(अन्तः);
				स्थानम्=अन्तः;
				if(अन्तः==आदिः){वृद्धिः(आदिः);लोपः=true;}
				सङ्ग्रहः[अन्तः]=वर्णाः.क्रमणम्(वर्णाः.अन्वयः);
			}
		}
	};
	वर्णसङ्ग्रहः पाठः;
	static const int भागसङ्ख्या=44,नासिकास्थानम्=16;
	वाचकम्(वर्णसङ्ग्रहः::वर्णक्रमः यद्वर्णाः):यन्त्रम्(भागसङ्ख्या,नासिकास्थानम्,0.17),पाठः(यद्वर्णाः)
	{
		std::fill_n(यन्त्रम्.मुखविस्तारः,यन्त्रम्.नासिकास्थानम्,0.5);
		std::fill_n(यन्त्रम्.मुखविस्तारः+यन्त्रम्.नासिकास्थानम्,यन्त्रम्.नासिक्यभागाः,1);
		std::fill_n(यन्त्रम्.नासिकाविस्तारः,यन्त्रम्.नासिक्यभागाः,1);
		यन्त्रम्.नासिकाविस्तारः[0]=0;
	}
	वाचकम्(const वाचकम् &)=delete;
	वाचकम्& operator=(const वाचकम् &)=delete;
	
	class प्रयत्नः
	{
		char अन्वयः[128];
		void (*सत्त्वम्)(void*);
	public:
		template<typename प्रकारः>
		प्रयत्नः& operator=(const प्रकारः& मूलम्)
		{
			if(sizeof(मूलम्)>sizeof(अन्वयः))throw(मूलम्);
			else memcpy(अन्वयः,&मूलम्,sizeof(मूलम्));
			सत्त्वम्=(void (*)(void*))([](void* अन्वयः){(*static_cast<प्रकारः*>(अन्वयः))();});
			return *this;
		}
		void operator()()
		{
			सत्त्वम्(अन्वयः);
		}
	}प्रयत्नाः[20];
	int प्रयत्नसङ्ख्या=0;
	template<typename प्रकारः>
	void आरोपणम्(const प्रकारः& मूलम्)
	{
		if(प्रयत्नसङ्ख्या<sizeof(प्रयत्नाः)){प्रयत्नाः[प्रयत्नसङ्ख्या]=मूलम्;प्रयत्नसङ्ख्या++;}
		else throw(मूलम्);
	}
	
	सङ्ख्या प्रयत्नकालः=0;
	
	सङ्ख्या कण्ठ्यमात्रा=0;
	सङ्ख्या कण्ठ्यान्तरम्=1/120.0;
	/*
	अत्,आत्,इत्,ईत्,उत्,ऊत्,ऋत्,ॠत्,ऌत्,ॡत्,एत्,ऐत्,ओत्,औत्,
	कः,खः,गः,घः,ङः,चः,छः,जः,झः,ञः,टः,ठः,डः,ढः,णः,तः,थः,दः,धः,नः,पः,फः,बः,भः,मः,यः,रः,लः,वः,शः,षः,सः,हः,
	विसर्गः,अनुस्वारः,मौनम्
	*/
	वर्णः स्वराः[]={अत्,आत्,इत्,ईत्,उत्,ऊत्,ऋत्,ॠत्,ऌत्,ॡत्,एत्,ऐत्,ओत्,औत्},
		
	
	void पठनम्()
	{
		प्रयत्नसङ्ख्या=0;
		सङ्ख्या अवधिः=0.3;
		वर्णः पूर्वः=पाठः.पठनम्(-1),पश्चिमः=पाठः.पठनम्(1),उपस्थितः=पाठः.पठनम्();
		
		
		प्रयत्नकालः+=अवधिः;
	}
	
	सङ्ख्या ग्रहणम्()
	{
		while(true)
		{
			if(कालः>=प्रयत्नकालः)पठनम्();
			
			{
				सङ्ख्या कण्ठ्यम्=0;
				if(कण्ठ्यमात्रा)
				{
					सङ्ख्या कण्ठ्यावधिः=1/600.0;
					सङ्ख्या कण्ठ्यकालः=floor(कालः/कण्ठ्यान्तरम्)*कण्ठ्यान्तरम्;
					if(कालः-कण्ठ्यकालः<कण्ठ्यावधिः)
						कण्ठ्यम्=कण्ठ्यमात्रा*4.0*(कालः-कण्ठ्यकालः)*(कण्ठ्यकालः+कण्ठ्यावधिः-कालः)/कण्ठ्यावधिः/कण्ठ्यावधिः;
				}
				for(int प्रयत्नक्रमः=0;प्रयत्नक्रमः<प्रयत्नसङ्ख्या;प्रयत्नक्रमः++)प्रयत्नाः[प्रयत्नक्रमः]();
				कालः+=यन्त्रम्.प्रवाहः(कण्ठ्यम्);
			}
			{
				int कतिग्रहणानि=कालः*(सङ्ख्या)नैमिषिकानि;
				if(कतिग्रहणानि!=ग्रहणानि)
				{
					ग्रहणानि=कतिग्रहणानि;
					return यन्त्रम्.निर्गतिः();
				}
			}
		}
	}
};



int main(int argc,char *argv[])
{
	वर्णः क्रमः[]={अत्,हः,ओत्};
	int स्थानम्=0;
	auto क्रमणम्=[&क्रमः,&स्थानम्]()
	{
		स्थानम्++;
		if(स्थानम्<=sizeof(क्रमः)/sizeof(वर्णः))return क्रमः[स्थानम्-1];
		else return मौनम्;
	};
	वाचकम् मुखम्({(वर्णः (*)(void*))([](void* d){return (*static_cast<decltype(क्रमणम्)*>(d))();}),&क्रमणम्});
	auto MyAudioCallback=[](void *userdata, Uint8 *stream, int len)
	{
		clock_t आरम्भकालः=clock();
		while(len)
		{
			*((सङ्ख्या*)stream)=((वाचकम्*)userdata)->ग्रहणम्();
			stream+=sizeof(सङ्ख्या);
			len-=sizeof(सङ्ख्या);
		}
		clock_t अन्तकालः=clock();
		double अवधिः=double(अन्तकालः-आरम्भकालः);
		std::cout<<अवधिः/CLOCKS_PER_SEC<<std::endl;
	};
	
	if (SDL_Init(SDL_INIT_AUDIO|SDL_INIT_VIDEO) < 0)
			return 1;
	
	SDL_Window *दर्शनम्=SDL_CreateWindow(
        "वाचकम्",                  // window title
        SDL_WINDOWPOS_UNDEFINED,           // initial x position
        SDL_WINDOWPOS_UNDEFINED,           // initial y position
        480,                               // width, in pixels
        480,                               // height, in pixels
        0                  // flags - see below
    );
  
  SDL_Renderer* चित्रकारः=SDL_CreateRenderer(दर्शनम्,-1,0);
  SDL_RenderClear(चित्रकारः);
  SDL_RenderPresent(चित्रकारः);
  
  SDL_AudioSpec want, have;
	SDL_AudioDeviceID dev;

	SDL_memset(&want, 0, sizeof(want)); /* or SDL_zero(want) */
	want.freq = मुखम्.नैमिषिकानि;
	want.format = AUDIO_F32;
	want.channels = 1;
	want.samples = मुखम्.नैमिषिकानि;//4096;
	want.callback = MyAudioCallback; /* you wrote this function elsewhere -- see SDL_AudioSpec for details */
	want.userdata=&मुखम्;
	
	dev = SDL_OpenAudioDevice(NULL, 0, &want, &have, 0);
	if (dev == 0) {
	    return 1;
	}
	SDL_PauseAudioDevice(dev, 0); /* start audio playing. */
	
	bool वर्त्तनम्=true;
	while (वर्त्तनम्) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        /* handle your event here */
    	if(event.type==SDL_KEYDOWN)
      {
				if(event.key.keysym.sym == SDLK_ESCAPE)वर्त्तनम्=false;
			}
    }
		SDL_Delay(16);
    /* do some other stuff here -- draw your app, etc. */
	}
	SDL_DestroyWindow(दर्शनम्);
	SDL_CloseAudioDevice(dev);
	SDL_Quit();
	return 0;
}
