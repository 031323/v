#include<iostream>
#include<cstring>
#include<cmath>
typedef float सङ्ख्या;

class वदनम्
{
public:
	int भागाः,नासिक्यभागाः,नासिकास्थानम्;
	सङ्ख्या शब्दवेगः=343,मुखदैर्घ्यम्,*मुखविस्तारः,*नासिकाविस्तारः,*बाह्यम्,*आन्तरिकम्,*नासिक्यबाह्यम्,*नासिक्यान्तरिकम्;
	वदनम्(int भागेभ्यः,int नासिकास्थानाय,सङ्ख्या मुखदैर्घ्याय)
	{
		भागाः=भागेभ्यः;
		नासिकास्थानम्=नासिकास्थानाय;
		नासिक्यभागाः=भागाः-नासिकास्थानम्;
		मुखदैर्घ्यम्=मुखदैर्घ्याय;
		मुखविस्तारः=new सङ्ख्या[भागाः];
		नासिकाविस्तारः=new सङ्ख्या[नासिक्यभागाः];
		बाह्यम्=new सङ्ख्या[भागाः]();
		आन्तरिकम्=new सङ्ख्या[भागाः]();
		नासिक्यबाह्यम्=new सङ्ख्या[नासिक्यभागाः]();
		नासिक्यान्तरिकम्=new सङ्ख्या[नासिक्यभागाः]();
	}
	~वदनम्()
	{
		delete[] मुखविस्तारः;delete[] नासिकाविस्तारः;delete[] बाह्यम्;delete[] आन्तरिकम्;delete[] नासिक्यबाह्यम्;delete[] नासिक्यान्तरिकम्;
	}
	सङ्ख्या निर्गतिः()
	{
		return बाह्यम्[भागाः-1]+आन्तरिकम्[भागाः-1]+नासिक्यबाह्यम्[नासिक्यभागाः-1]+नासिक्यान्तरिकम्[नासिक्यभागाः-1];
	}
	सङ्ख्या प्रवाहः(सङ्ख्या कण्ठ्यम्)
	{
		सङ्ख्या नवबाह्यम्[भागाः+1],नवान्तरिकम्[भागाः+1],नवनासिक्यबाह्यम्[नासिक्यभागाः+1],नवनासिक्यान्तरिकम्[नासिक्यभागाः+1];
		for(int भागः=1;भागः<भागाः;भागः++)
		{
			सङ्ख्या प्रत्यागतिः=(मुखविस्तारः[भागः-1]-मुखविस्तारः[भागः])/(मुखविस्तारः[भागः-1]+मुखविस्तारः[भागः])*(बाह्यम्[भागः-1]+आन्तरिकम्[भागः]);
			नवबाह्यम्[भागः]=बाह्यम्[भागः-1]-प्रत्यागतिः;
			नवान्तरिकम्[भागः]=आन्तरिकम्[भागः]+प्रत्यागतिः;
		}
		for(int भागः=1;भागः<भागाः;भागः++)
		{
			सङ्ख्या प्रत्यागतिः=(मुखविस्तारः[भागः-1]-मुखविस्तारः[भागः])/(मुखविस्तारः[भागः-1]+मुखविस्तारः[भागः])*(बाह्यम्[भागः-1]+आन्तरिकम्[भागः]);
			नवबाह्यम्[भागः]=बाह्यम्[भागः-1]-प्रत्यागतिः;
			नवान्तरिकम्[भागः]=आन्तरिकम्[भागः]+प्रत्यागतिः;
		}
		
		नवबाह्यम्[0]=आन्तरिकम्[0]*0.75+कण्ठ्यम्;
		नवान्तरिकम्[भागाः]=बाह्यम्[भागाः-1]*(-0.85);
		नवनासिक्यान्तरिकम्[नासिक्यभागाः]=नासिक्यबाह्यम्[नासिक्यभागाः-1]*(-0.85);
		
		{
			सङ्ख्या योगः=मुखविस्तारः[नासिकास्थानम्]+मुखविस्तारः[नासिकास्थानम्-1]+नासिकाविस्तारः[0];
			सङ्ख्या प्रत्यागतिः=(2*मुखविस्तारः[नासिकास्थानम्-1]-योगः)/योगः;
			नवान्तरिकम्[नासिकास्थानम्]=प्रत्यागतिः*बाह्यम्[नासिकास्थानम्-1]+(1+प्रत्यागतिः)*(नासिक्यान्तरिकम्[0]+आन्तरिकम्[नासिकास्थानम्]);
			प्रत्यागतिः=(2*मुखविस्तारः[नासिकास्थानम्]-योगः)/योगः;
			नवबाह्यम्[नासिकास्थानम्]=प्रत्यागतिः*आन्तरिकम्[नासिकास्थानम्]+(1+प्रत्यागतिः)*(नासिक्यान्तरिकम्[0]+बाह्यम्[नासिकास्थानम्-1]);
			प्रत्यागतिः=(2*नासिकाविस्तारः[0]-योगः)/योगः;
			नवनासिक्यबाह्यम्[0]=प्रत्यागतिः*नासिक्यान्तरिकम्[0]+(1+प्रत्यागतिः)*(बाह्यम्[नासिकास्थानम्-1]+आन्तरिकम्[नासिकास्थानम्]);
		}
		
		memcpy(बाह्यम्,नवबाह्यम्,भागाः*sizeof(सङ्ख्या));
		memcpy(आन्तरिकम्,नवान्तरिकम्+sizeof(सङ्ख्या),भागाः*sizeof(सङ्ख्या));
		memcpy(नासिक्यबाह्यम्,नवनासिक्यबाह्यम्,नासिक्यभागाः*sizeof(सङ्ख्या));
		memcpy(नासिक्यान्तरिकम्,नवनासिक्यान्तरिकम्+sizeof(सङ्ख्या),नासिक्यभागाः*sizeof(सङ्ख्या));
		
		return मुखदैर्घ्यम्/सङ्ख्या(भागाः)/शब्दवेगः;
	}
};

int main(int argc,char *argv[])
{
	वदनम् यन्त्रम्(44,16,0.17);
	std::fill_n(यन्त्रम्.मुखविस्तारः,यन्त्रम्.भागाः,1);
	std::fill_n(यन्त्रम्.नासिकाविस्तारः,यन्त्रम्.नासिक्यभागाः,1);
	यन्त्रम्.नासिकाविस्तारः[0]=0;
	सङ्ख्या कालः=0;
	int ग्रहणानि=0;
	int नैमिषिकानि=16000;
	while(कालः<1)
	{
		{
			सङ्ख्या कण्ठ्यान्तरम्=1/120.0;
			सङ्ख्या कण्ठ्यावधिः=1/600.0;
			सङ्ख्या कण्ठ्यकालः=floor(कालः/कण्ठ्यान्तरम्)*कण्ठ्यान्तरम्;
			सङ्ख्या कण्ठ्यम्=0;
			if(कालः-कण्ठ्यकालः<कण्ठ्यावधिः)कण्ठ्यम्=4.0*(कालः-कण्ठ्यकालः)*(कण्ठ्यकालः+कण्ठ्यावधिः-कालः)/कण्ठ्यावधिः/कण्ठ्यावधिः;
			कालः+=यन्त्रम्.प्रवाहः(कण्ठ्यम्);
		}
		{
			int कतिग्रहणानि=कालः*(सङ्ख्या)नैमिषिकानि;
			if(कतिग्रहणानि!=ग्रहणानि)
			{
				सङ्ख्या ग्रहणम्=यन्त्रम्.निर्गतिः();
				fwrite(&ग्रहणम्,sizeof(सङ्ख्या),1,stdout);
				ग्रहणानि=कतिग्रहणानि;
			}
		}
	}
	return 0;
}
